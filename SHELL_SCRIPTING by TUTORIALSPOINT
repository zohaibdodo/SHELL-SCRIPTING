Source: TUTORIALSPOINT

https://www.tutorialspoint.com/unix/unix-using-variables.htm

### What is Shell Scripting?
Shell script is an environment in which we can run our commands, programs and scripts to acheive a certain goal. 

### What is Shell Prompt?
Like command prompt

### Shell Types?
Bourne Shell (sh)
Korn Shell (ksh)
Bourne Again Shell (bash)
POSIX shell (sh)

C Shell:
C shell (csh)
TENEX/TOPS C shell (tcsh)

Shebang : #!/bin/bash

### Variables:
The name of a variable can contain only letters (a to z or A to Z), numbers ( 0 to 9) or the underscore character ( _ ).

Invalid variables:
2_VAR
-VARIABLE
VAR1-VAR2
VAR_A!

Read-only Variables
Shell provides a way to mark variables as read-only by using the read-only command. After a variable is marked read-only, its value cannot be changed.

###(Example:)###

#!/bin/sh

NAME="Zara Ali"
readonly NAME
NAME="Qadiri"

Unsetting Variables:
Unsetting or deleting a variable directs the shell to remove the variable from the list of variables that it tracks. Once you unset a variable, you cannot access the stored value in the variable.

$unset variable_name

You cannot use the unset command to unset variables that are marked readonly.

###Variable Types:
Local Variables
Environment Variables
Shell Variables

### Special Variables:

$0 : The filename of the current script.
$n : These variables correspond to the arguments with which a script was invoked. Here n is a positive decimal number corresponding to the position of an argument (the first argument is $1, the second argument is $2, and so on).
$# : The number of arguments supplied to a script.
$* : All the arguments are double quoted. If a script receives two arguments, $* is equivalent to $1 $2.
$@ : All the arguments are individually double quoted. If a script receives two arguments, $@ is equivalent to $1 $2.
$? : The exit status of the last command executed. (0 for successful and 1 for unsuccessful)
$$ : The process number of the current shell. For shell scripts, this is the process ID under which they are executing.
$! : The process number of the last background command.

Difference b/w $* and $@

"$*" special parameter takes the entire list as one argument with spaces between 
"$@" special parameter takes the entire list and separates it into separate arguments

### Shell Arrays:

Format to create an array
array_name[index]=value

To access an array
${array_name[value]}

### Shell Basic Operators:

Arithmetic Operators (+,-,/,*,%,=,==,!=)
Relational Operators (-eq,-ne,-gt,-lt,-ge,-le)
Boolean Operators (!,-o,-a)
String Operators (=,!=,-z,-n,str)
File Test Operators (-b,-c,-d,-f,-g,-k,-p,-t,-u,-r,-w,-x,-s,-e)

### Shell Decision Making:

The if...else statement (if...fi statement, if...else...fi statement, if...elif..fi statement)
The case...esac statement

### Shell Loop Types:

The while loop: the while loop executes the given commands until the given condition remains true
The for loop: 
The until loop : the until loop executes until a given condition becomes true.
The select loop

###Nested loops:
Loop with in loop.

### Shell Loop Control:

INFINITE LOOP: A loop may continue forever if the required condition is not met
BREAK STATEMENT: It is used to terminate the execution of the entire loop, after completion of code up to the break statement It then steps down to the code following the end of the loop.

#!/bin/sh

a=0

while [ $a -lt 10 ]
do
   echo $a
   if [ $a -eq 5 ]
   then
      break
   fi
   a=`expr $a + 1`
done

CONTINUOUS STATEMENT: 







Example:

./command -yes -no /home/username
so now..
$# = 3
$* = -yes -no /home/username
$@ = ("-yes" "-no" "/home/username")
$0 = ./command
$1 = -yes
$2 = -no
$3 = /home/username