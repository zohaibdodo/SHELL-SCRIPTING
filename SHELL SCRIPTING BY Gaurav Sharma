Youtube Videos by Gaurav Sharma.
Date: 6 June 2022 10:08PM

#Video 1: Introduction to Playlist

### What is Shell Scripting?
Shell script is an environment in which we can run our commands, programs and scripts to acheive a certain goal. 

### What is Shell Prompt?
Like command prompt

### Shell Types?
Bourne Shell (sh)
Korn Shell (ksh)
Bourne Again Shell (bash)
POSIX shell (sh)

C Shell:
C shell (csh)
TENEX/TOPS C shell (tcsh)

#Video 2: What and Why shell scripting

#Video 3: First Shell Script - Hello World Shell Script 

#Video 4: First Shell Script - Hello World Shell Script

Shebang : #!/bin/bash

#Video 5: Built-in, Keywords and Commands in Shellscript
To check which word is buildin, command or Keywords

type -a echo

if command is shell buildin then it will execute directly and if command is not found it will search in ($PATH) which is predefined.

#Video 6: Print Hello World - Print in Different Color in Shellscipt

If you want to show echo with colors then:
echo -e "\033[0;31m Success message here"
echo -e "\033[0;32m Success message here"
echo -e "\033[0;33m Success message here"

#Video 7: Comments and Echo in Shell script - Multiple Line Print Statement

"#" Use hash for comments.

Single quote  ' ' is called strong quote which prints as it is.

"\t" tab which is almost 8 spaces.
"\v" vertical tab.
"\n" for new lines.

#Video 8: User Define Variable in Shell Script - How to Define Variable.

User define variables
System define variables 

#Video 9: Rules for Naming Variable Name - Valid Variable Name in Shell Script

### Variables:
The name of a variable can contain only letters (a to z or A to Z), numbers ( 0 to 9) or the underscore character ( _ ).

Invalid variables:
2_VAR
-VARIABLE
VAR1-VAR2
VAR_A!

###Variable Types:
Local Variables
Environment Variables
Shell Variables

### Special Variables:

$0 : The filename of the current script.
$n : These variables correspond to the arguments with which a script was invoked. Here n is a positive decimal number corresponding to the position of an argument (the first argument is $1, the second argument is $2, and so on).
$# : The number of arguments supplied to a script.
$* : All the arguments are double quoted. If a script receives two arguments, $* is equivalent to $1 $2.
$@ : All the arguments are individually double quoted. If a script receives two arguments, $@ is equivalent to $1 $2.
$? : The exit status of the last command executed. (0 for successful and 1 for unsuccessful)
$$ : The process number of the current shell. For shell scripts, this is the process ID under which they are executing.
$! : The process number of the last background command.

Difference b/w $* and $@

"$*" special parameter takes the entire list as one argument with spaces between 
"$@" special parameter takes the entire list and separates it into separate arguments

use variable like "${name}"

for concatenate variables: ${name}${age}

variable names cannot be reserved words.
Variable name cannot have whitespace in between them.
the variable name cannot have special characters.
the first character of the variable name cannot be a number. 

#Video 10: System Defined Variable in Shell Script - Shell Variables 

$env

We use system variable in capital letters.

echo ${HOME}
echo ${$}       # process id
echo ${PPID}    # parent process id



#Video 11: Take Input From User in Shell Script - Read Data From User

#! /bin/bash

read -p "Please enter your name:" name 
read -p "Please enter your age:" age

echo "Your name is $name and your age is $age"

For secret/silent password:

Use -s for secret password

#Video 12: Command line arguments

You take input from command while running script

#! /bin/bash

echo ${0}
echo ${1}
echo ${2}

$./commandlineargument.sh "zohaib" "shabbir" 3

#Video 13: Command line arguments

use curly braces instead while giving command line argument.

echo $# count for command line arguments
echo $@ print all command line arguments

#Video 14: Assign a Command's Output to a Variable in Shell Script

Use ` ` back tick or round brakets ( ) to save output of command in variable

date_time=$(date +"%D-%T")

#Video 15: How to create read only variable in Shell Script (Readonly variable)

Read-only Variables
Shell provides a way to mark variables as read-only by using the read-only command. After a variable is marked read-only, its value cannot be changed.

###(Example:)###

#!/bin/sh

NAME="Zara Ali"
readonly NAME
NAME="Qadiri"

For multiple inputs:

read name1 name2

Unsetting Variables:
Unsetting or deleting a variable directs the shell to remove the variable from the list of variables that it tracks. Once you unset a variable, you cannot access the stored value in the variable.

$unset variable_name

You cannot use the unset command to unset variables that are marked readonly.

#Video 16: How to Convert a String to Upper and Lower Case in Shell Script

For Upper case:
echo "${string}"
echo "${string^}"
echo "${string^^}"

For Lower case:
echo "${string}"
echo "${string,}"
echo "${string,,}"

${#string} this will print length of string variable

#Video 17: How to Convert a String to SubString - String Manipulation

string="abcdefghijklmnopqrstuvwxyz"

echo "${string:0} # This will print from very first letter.
echo "${string:1} # This will skip first letter and start printing from second letter.

echo "${string:0:3} # This will start from 0 and go till three letters.
echo "${string: -5} # This will start from left and go till five letters.

echo "${string#a*c} # from starting,  Shortest
echo "${string##a*c} # from starting, longest match

#Video 18: How to Set Default Value of a Variable 

For Default value:
read -p "Please enter your name:"
name=${name:-World}
echo "Hello ${name^}"

For unset variable:
yourname=${unsetvariable-Manish}
echo $yourname

For empty string variable:
myname=""
mytestname=${myname-Kali}
echo ${mytestname}

#Video 19: Check is Command line variable passed or not

":" is called Null command which always shows successful status.

#If variable is set

#! /bin/bash

name="Gaurav"
: ${name :? "Please enter variable values."}
echo "I am here"

#Video 20: - Arithmetic Operator - How to do airthmetic operator in shellscript

### Shell Basic Operators:

Arithmetic Operators (+,-,/,*,%,=,==,!=)
Relational Operators (-eq,-ne,-gt,-lt,-ge,-le)
Boolean Operators (!,-o,-a)
String Operators (=,!=,-z,-n,str)
File Test Operators (-b,-c,-d,-f,-g,-k,-p,-t,-u,-r,-w,-x,-s,-e)



21 - Functions - Functions in Shellscript 
22 - How Shell ScriptLoad - Functions in Shellscript -2
23 - How to Pass Arguments to a Functions in Shellscript - 
24 - How to Create Local Variable in Functions - Local in Shellscript 
25 - What is $? and test command in linux - $? and Test Command 
26 - How to Use If With Command - Conditional Statement in Shellscript 
27 - How to Use If With [ (Square brackets)-Integer Comparison Shellscript



#Video 26: What is $? and test command in linux

echo $? # for exit status

a=5
test $a -eq 5

0 #result

#Video 27:

if command
then block (command or statement)
fi

#Video 28: How to Use If With [ (Square brackets)-Integer Comparison Shellscript

test command and square brackets are used  to comparison

#! /bin/bash

num=5

if [ $num -eq 5 ]
then 
    echo "Number is 5"
fi

# man test for all the comparison details

#Video 29: Shell Script tutorials - 28 - [ vs [[ in Shellscript and String Comparison in Shellscript

[ "zohaib" == "zohaib" ]

Use double square brackets for comparisons.

name="zohaib ahmed"
if [[ -n ${name} ]]
then 
  echo "length of string is non zero"
fi

-n "non zero"
-z "zero"
!= "not equal to"

#Video 30: How to Check File is Exist, Directory, Block Device, Character Device

#! /bin/bash

file_full_path="/home"

if [[ -d $file_full_path ]]
then 
  echo "$file_full_path is a dir"
fi

man test for complete 

-d directory
-b block
-c charactor
-e file exist
-r read
-w write

#Video 31: What is Not Operator in Shellscript - How to use not operator in bash

#! /bin/bash

name="saurav sharma"
othername="gaurav sharma"

if [[ ! ${name} == ${othername} ]]
then
    echo "both are same"
fi

#Video 32: AND operator in Shellscript - && in shellscript

#! /bin/bash

OS_TYPE=$(uname)

if [[ ${OS_TYPE} == "Linux" && ${UID} -eq 1000 ]]
then
    echo "User is root user and OS is Linux"
fi

#Video 33: OR Operator



#Video 34: If-Else In Shellscript - If-Else Syntax In Shellscript